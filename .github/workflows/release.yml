name: "Release"
on:
  push:
    branches: [feat/csp-toolkit]

jobs:
  get_packages:
    name: "Get Packages to Release"
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get_packages.outputs.packages }}
    steps:
      - name: Debug directory structure
        run: ls -R ./.github/actions

      - name: Set up environment
        uses: ./.github/actions/setup-env
        with:
          node-version: "20"   # Specify the Node.js version

      - name: Get list of packages
        id: get_packages
        run: |
          chmod +x ./scripts/packages-to-release.sh
          packages=$(./scripts/packages-to-release.sh)
          echo "packages=$packages" >> $GITHUB_OUTPUT

  build_and_test:
    name: "Build and Test"
    runs-on: ubuntu-latest
    needs: get_packages  # Ensures this job runs after get_packages
    strategy:
      matrix:
        package: ${{ fromJson(needs.get_packages.outputs.packages) }}
    steps:
      - name: Set up environment
        uses: ./.github/actions/setup-env
        with:
          node-version: "20"   # Specify the Node.js version

      - name: Get package path
        id: get_package_path
        run: |
          package_path=$(./scripts/get-package-path.sh ${{ matrix.package }})
          echo "PACKAGE_PATH=$package_path" >> $GITHUB_OUTPUT

      - name: Build package
        run: pnpm p:build # Builds all packages

      - name: Archive production artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: package-dist-${{ matrix.package }}
          retention-days: 30
          path: ${{ steps.get_package_path.outputs.PACKAGE_PATH }}/dist

      - name: Run Unit Tests
        run: pnpm p:test # Tests all packages

      - name: Build Apps
        run: pnpm build

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Run tests
        run: pnpm test

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.package }}
          path: playwright-report/
          retention-days: 5

  publish:
    runs-on: ubuntu-latest
    needs: [get_packages, build_and_test]
    strategy:
      matrix:
        package: ${{ fromJson(needs.get_packages.outputs.packages) }}
    name: "Publish"
    permissions:
      contents: write
    steps:
      - name: Set up environment
        uses: ./.github/actions/setup-env
        with:
          node-version: "20"   # Specify the Node.js version

      - name: Get package path
        id: get_package_path
        run: |
          package_path=$(./scripts/get-package-path.sh ${{ matrix.package }})
          echo "PACKAGE_PATH=$package_path" >> $GITHUB_OUTPUT

      - name: Download production artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-dist-${{ matrix.package }}
          path: ${{ steps.get_package_path.outputs.PACKAGE_PATH }}/dist

      - uses: JS-DevTools/npm-publish@v3
        id: publish
        with:
          token: ${{ secrets.NPM_AUTH_TOKEN }}
          package: ${{ steps.get_package_path.outputs.PACKAGE_PATH }}
          dry-run: true

      - name: Bump version and push tag
        if: ${{ steps.publish.outputs.type }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: v${{ steps.publish.outputs.version }}
          tag_prefix: ${{ matrix.package }}_

      - name: Create a GitHub release
        if: ${{ steps.publish.outputs.type }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          generateReleaseNotes: true

  # build_docs:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #     - run: corepack enable
  #     - run: pnpm install --filter docs
  #     - name: Build Documentation Site
  #       run: pnpm docs:build
  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: ./apps/docs/out

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_docs
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
